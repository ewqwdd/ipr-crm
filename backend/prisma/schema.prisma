generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  role              Role                   @relation(fields: [roleId], references: [id])
  roleId            Int
  username          String                 @unique
  phone             String?                @unique
  email             String                 @unique
  passwordHash      String
  firstName         String?
  lastName          String?
  avatar            String?
  specId            Int?
  assignedCourses   Assigned_Course[]
  assignedTests     User_Assigned_Test[]
  growthPlans       IndividualGrowthPlan[] @relation("UserGrowthPlans")
  growthPlansMentor IndividualGrowthPlan[] @relation("MentorGrowthPlans")
  tasksToReview     Task[]

  Spec            Spec?              @relation(fields: [specId], references: [id])
  ratesToEvaluate Rate360Evaluator[]
  rates360        Rate360[]
  notifications   Notification[]
  logs            GrowthPlanLog[]
  teams        UserTeam[]
  specsOnTeams SpecsOnUserTeam[]
  userRates    UserRates[]

  // Self-relation fields
  mentees  User[]  @relation("MentorMentees")
  mentor   User?   @relation("MentorMentees", fields: [mentorId], references: [id])
  mentorId Int?
  teamCurator Team[]
  
  createdAt DateTime @default(now())
}

model Rate360 {
  id          Int               @id @default(autoincrement())
  userConfirmed Boolean              @default(false)
  curatorConfirmaed Boolean        @default(false)
  startDate   DateTime
  endDate     DateTime
  userId      Int
  user        User               @relation(fields: [userId], references: [id])
  archived    Boolean              @default(false)

  userRates UserRates[]
  evaluators  Rate360Evaluator[]
  specs       SpecsOnRate360[]
}

model UserRates {
  id        Int  @id @default(autoincrement())
  userId    Int
  rate360Id Int
  indicatorId Int
  rate      Int
  comment   String?
  approved  Boolean @default(false)

  indicator Indicator @relation(fields: [indicatorId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
  rate360 Rate360 @relation(fields: [rate360Id], references: [id])
}

model Role {
  id    Int @id @default(autoincrement())
  name  String
  users User[]
}

// назначенные курсы для юзеоов
model Assigned_Course {
  id        Int    @id @default(autoincrement())
  userId    Int
  courseId  Int
  startDate DateTime?
  endDate   DateTime?
  status    Status    @default(ACTIVE)

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model Course {
  id          Int  @id @default(autoincrement())
  externalUrl String?
  name        String
  description String
  specId      Int?
  skillId     Int

  Spec            Spec?             @relation(fields: [specId], references: [id])
  Assigned_Course Assigned_Course[]
  archived        Boolean           @default(false)
}

model Spec {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  users       User[]
  courses     Course[]
  Test        Test[]
  rate360     SpecsOnRate360[]
  growthPlans IndividualGrowthPlan[]
  usersTeams  SpecsOnUserTeam[]
  competencyBlocks CompetencyBlock[]
}


// назначенные тесты юзеру
model User_Assigned_Test {
  id        Int    @id @default(autoincrement())
  userId    Int
  testId    Int
  rate360Id Int?
  startDate DateTime?
  endDate   DateTime?
  result    Resut?

  user    User     @relation(fields: [userId], references: [id])
  test    Test     @relation(fields: [testId], references: [id])
}

// тесты
model Test {
  id             Int   @id @default(autoincrement())
  skillId        Int
  specId         Int?
  name           String
  anonymous      Boolean  @default(false)
  description    String
  access         String
  slug           String
  previewImage   String?
  successMessage String?
  startDate      DateTime
  endDate        DateTime

  testQuestions Question[]
  usersAssigned User_Assigned_Test[]

  Spec     Spec?   @relation(fields: [specId], references: [id])
  archived Boolean @default(false)
}

model Question {
  id          Int   @id @default(autoincrement())
  type        String
  description String
  testId      Int
  order       Int
  options     Option[]

  Test Test @relation(fields: [testId], references: [id])
}

model Option {
  id         Int  @id @default(autoincrement())
  questionId Int
  value      String
  isCorrect  Boolean @default(false)

  Question Question @relation(fields: [questionId], references: [id])
}

// оценивающий 360
model Rate360Evaluator {
  id        Int  @id @default(autoincrement())
  userId    Int
  rate360Id Int

  type EvaluatorType @default(TEAM_MEMBER)

  user    User    @relation(fields: [userId], references: [id])
  rate360 Rate360 @relation(fields: [rate360Id], references: [id])
}

model SpecsOnRate360 {
  specId    Int
  rate360Id Int

  spec    Spec    @relation(fields: [specId], references: [id])
  rate360 Rate360 @relation(fields: [rate360Id], references: [id])

  @@id([specId, rate360Id])
}

model SkillsOnRate360 {
  skillId   Int
  rate360Id Int

  @@id([skillId, rate360Id])
}

// ИПР
model IndividualGrowthPlan {
  id        Int    @id @default(autoincrement())
  userId    Int
  startDate DateTime
  endDate   DateTime?
  status    Status
  goal      String
  // tasks     String
  result    Resut?
  specId    Int?
  mentorId  Int?

  spec      Spec?           @relation(fields: [specId], references: [id])
  user      User            @relation("UserGrowthPlans", fields: [userId], references: [id])
  mentor    User?           @relation("MentorGrowthPlans", fields: [mentorId], references: [id])
  tasks     Task[]
  materials Material[]
  logs      GrowthPlanLog[]
  archived  Boolean         @default(false)
}

model GrowthPlanLog {
  id          Int     @id @default(autoincrement())
  planId      Int
  changedById Int
  changeDate  DateTime   @default(now())
  changeType  ChangeType // Например, CREATED, UPDATED, DELETED
  changes     Json

  plan      IndividualGrowthPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  changedBy User                 @relation(fields: [changedById], references: [id])
}

model Task {
  id          Int           @id @default(autoincrement())
  planId      Int
  reviewerId  Int?
  startDate   DateTime
  endDate     DateTime?
  status      TaskStatus
  name        String
  description String
  priority    TaskPriority
  url         String?
  type        TaskMaterialType
  

  reviewer User?                @relation(fields: [reviewerId], references: [id])
  plan     IndividualGrowthPlan @relation(fields: [planId], references: [id])
}

model Notification {
  id          Int   @id @default(autoincrement())
  userId      Int
  title       String
  description String?
  date        DateTime
  watched     Boolean
  type        String // todo: enum
  url         String?

  user User @relation(fields: [userId], references: [id])
}

model Team {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  users       UserTeam[]
  parentTeamId Int?
  parentTeam  Team?    @relation("SubTeams", fields: [parentTeamId], references: [id])
  subTeams    Team[]   @relation("SubTeams")
  curatorId   Int?
  curator     User?    @relation(fields: [curatorId], references: [id])
  createdAt DateTime @default(now())
}


model UserTeam {
  id      Int    @id @default(autoincrement())
  userId  Int
  teamId  Int

  user    User   @relation(fields: [userId], references: [id])
  team    Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  specs   SpecsOnUserTeam[] @relation("UserTeamToSpecs")

  @@unique([userId, teamId])
}

model SpecsOnUserTeam {
  specId  Int
  teamId  Int
  userId  Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  spec Spec @relation(fields: [specId], references: [id], onDelete: Cascade)
  userTeam UserTeam @relation("UserTeamToSpecs", fields: [userId, teamId], references: [userId, teamId], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([specId, teamId, userId])
}

// Компетенции внутри специализации
// специализация -> блоки компетенций -> компетенции -> индикаторы
model CompetencyBlock {
  id          Int       @id @default(autoincrement())
  name        String
  type        SkillType    // Soft или Hard
  competencies Competency[] // Связь с компетенциями
  specId      Int?
  spec        Spec? @relation(fields: [specId], references: [id], onDelete: Cascade)
}

model Competency {
  id          Int       @id @default(autoincrement())
  name        String
  blockId     Int
  block       CompetencyBlock @relation(fields: [blockId], references: [id], onDelete: Cascade)
  indicators  Indicator[] // Связь с индикаторами
  materials   CompetencyMaterial[]
}

model Indicator {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  competencyId Int
  competency  Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  materials   IndicatorMaterial[]
  
  userRates UserRates[]
}


// Материалы 
// Привязаны к компетенциям и индикаторам
model Material {
  id          Int              @id @default(autoincrement())
  planId      Int?
  name        String
  description String
  url         String?
  contentType MaterialContentType

  plan IndividualGrowthPlan? @relation(fields: [planId], references: [id])
  competencyMaterials CompetencyMaterial[]
  indicatorMaterials IndicatorMaterial[]
}

model CompetencyMaterial {
  competencyId Int
  materialId   Int
  competency   Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  material     Material   @relation(fields: [materialId], references: [id], onDelete: Cascade)
  @@id([competencyId, materialId])
}

model IndicatorMaterial {
  indicatorId Int
  materialId  Int
  indicator   Indicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade)
  material    Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)
  @@id([indicatorId, materialId])
}

enum SkillType {
  SOFT
  HARD
}

enum Status {
  COMPLETED
  ACTIVE
  INACTIVE
}

enum TaskStatus {
  COMPLETED
  IN_PROGRESS
  IN_REVIEW
  TO_DO
}

enum MaterialContentType {
  VIDEO
  ARTICLE
  BOOK
  COURSE
}

enum TaskMaterialType {
  GENERAL
  AFTER_RATE
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

enum Resut {
  PASSED
  FAILED
}

enum ChangeType {
  CREATED
  UPDATED
  DELETED
}

enum EvaluatorType {
  CURATOR
  TEAM_MEMBER
  SUBORDINATE
}