generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                    @id @default(autoincrement())
  role              Role                   @relation(fields: [roleId], references: [id])
  roleId            Int
  username          String                 @unique
  phone             String?                @unique
  email             String                 @unique
  passwordHash      String?
  firstName         String?
  lastName          String?
  avatar            String?
  specId            Int?
  authCode          String?

  assignedCourses   Assigned_Course[]
  assignedTests     User_Assigned_Test[]
  growthPlans       IndividualGrowthPlan[] @relation("UserGrowthPlans")
  growthPlansMentor IndividualGrowthPlan[] @relation("MentorGrowthPlans")

  Spec            Spec?              @relation(fields: [specId], references: [id])
  ratesToEvaluate Rate360Evaluator[]
  rates360        Rate360[]
  notifications   Notification[]
  logs            GrowthPlanLog[]
  teams           UserTeam[]
  specsOnTeams    SpecsOnUserTeam[]
  userRates       UserRates[]
  userComments    UserComments[]
  planCurators    GrowthPlanCurator[]

  // Self-relation fields
  mentees     User[] @relation("MentorMentees")
  mentor      User?  @relation("MentorMentees", fields: [mentorId], references: [id])
  mentorId    Int?
  teamCurator Team[]

  createdAt DateTime @default(now())
}

model Rate360 {
  id               Int       @id @default(autoincrement())
  userConfirmed    Boolean   @default(false)
  curatorConfirmed Boolean   @default(false)
  startDate        DateTime? @default(now())
  endDate          DateTime?
  userId           Int
  specId           Int
  teamId           Int
  user             User      @relation(fields: [userId], references: [id])
  archived         Boolean   @default(false)
  type             SkillType
  userComment     String?
  curatorComment  String?
  finished         Boolean   @default(false)
  rateType          Rate360Type @default(Rate360)

  competencyBlocks CompetencyBlock[]
  userRates  UserRates[]
  evaluators Rate360Evaluator[]
  comments  UserComments[]
  spec       Spec               @relation(fields: [specId], references: [id])
  team       Team              @relation(fields: [teamId], references: [id])
  plan       IndividualGrowthPlan?
  createdAt          DateTime  @default(now())
}

model UserComments {
  id        Int      @id @default(autoincrement())
  userId    Int
  rate360Id Int
  comment   String
  competencyId Int

  compentency Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  rate360 Rate360 @relation(fields: [rate360Id], references: [id], onDelete: Cascade)
}

model UserRates {
  id          Int     @id @default(autoincrement())
  userId      Int
  rate360Id   Int
  indicatorId Int
  rate        Int
  approved   Boolean @default(false)
  approvedByUser Boolean @default(false)

  indicator Indicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  rate360   Rate360   @relation(fields: [rate360Id], references: [id], onDelete: Cascade)
  createdAt          DateTime  @default(now())
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

// назначенные курсы для юзеоов
model Assigned_Course {
  id        Int       @id @default(autoincrement())
  userId    Int
  courseId  Int
  startDate DateTime?
  endDate   DateTime?
  status    Status    @default(ACTIVE)

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model Course {
  id          Int     @id @default(autoincrement())
  externalUrl String?
  name        String
  description String
  specId      Int?
  skillId     Int

  Spec            Spec?             @relation(fields: [specId], references: [id])
  Assigned_Course Assigned_Course[]
  archived        Boolean           @default(false)
}

model Spec {
  id               Int                    @id @default(autoincrement())
  name             String
  description      String?
  users            User[]
  courses          Course[]
  Test             Test[]
  rate360          Rate360[]
  growthPlans      IndividualGrowthPlan[]
  usersTeams       SpecsOnUserTeam[]
  competencyBlocks CompetencyBlock[]
  curatorSpecs            CuratorSpecs[]
}

// назначенные тесты юзеру
model User_Assigned_Test {
  id        Int       @id @default(autoincrement())
  userId    Int
  testId    Int
  rate360Id Int?
  startDate DateTime?
  endDate   DateTime?
  result    Resut?

  user User @relation(fields: [userId], references: [id])
  test Test @relation(fields: [testId], references: [id])
}

// тесты
model Test {
  id             Int      @id @default(autoincrement())
  skillId        Int
  specId         Int?
  name           String
  anonymous      Boolean  @default(false)
  description    String
  access         String
  slug           String
  previewImage   String?
  successMessage String?
  startDate      DateTime
  endDate        DateTime

  testQuestions Question[]
  usersAssigned User_Assigned_Test[]

  Spec     Spec?   @relation(fields: [specId], references: [id])
  archived Boolean @default(false)
}

model Question {
  id          Int      @id @default(autoincrement())
  type        String
  description String
  testId      Int
  order       Int
  options     Option[]

  Test Test @relation(fields: [testId], references: [id])
}

model Option {
  id         Int     @id @default(autoincrement())
  questionId Int
  value      String
  isCorrect  Boolean @default(false)

  Question Question @relation(fields: [questionId], references: [id])
}

// оценивающий 360
model Rate360Evaluator {
  id        Int @id @default(autoincrement())
  userId    Int
  rate360Id Int

  type EvaluatorType @default(TEAM_MEMBER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  rate360 Rate360 @relation(fields: [rate360Id], references: [id], onDelete: Cascade)
}

model SkillsOnRate360 {
  skillId   Int
  rate360Id Int

  @@id([skillId, rate360Id])
}

model GrowthPlanCurator {
  id        Int @id @default(autoincrement())
  userId    Int
  planId    Int
  competencyId Int

  competency Competency @relation(fields: [competencyId], references: [id])
  user User                  @relation(fields: [userId], references: [id])
  plan IndividualGrowthPlan @relation(fields: [planId], references: [id])
}

model GrowthPlanTask {
  id        Int       @id @default(autoincrement())
  deadline  DateTime?
  status    TaskStatus
  priority TaskPriority? @default(MEDIUM)
  type     TaskMaterialType
  onBoard  Boolean @default(false)

  planId    Int
  competencyId Int?
  indicatorId Int?
  materialId Int

  material Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
  competency Competency? @relation(fields: [competencyId], references: [id])
  indicator Indicator? @relation(fields: [indicatorId], references: [id])
  plan IndividualGrowthPlan? @relation(fields: [planId], references: [id])
}

// ИПР
model IndividualGrowthPlan {
  id        Int       @id @default(autoincrement())
  userId    Int
  startDate DateTime
  endDate   DateTime?
  status    Status
  goal      String
  result    Resut?
  specId    Int?
  mentorId  Int?
  rate360Id Int?      @unique  // Добавляем @unique

  spec      Spec?           @relation(fields: [specId], references: [id])
  user      User            @relation("UserGrowthPlans", fields: [userId], references: [id])
  mentor    User?           @relation("MentorGrowthPlans", fields: [mentorId], references: [id])
  rate360  Rate360?        @relation(fields: [rate360Id], references: [id]) // Делаем опциональным
  materials Material[]
  logs      GrowthPlanLog[]
  archived  Boolean         @default(false)
  tasks     GrowthPlanTask[]
  version   DateTime        @default(now())
  skillType SkillType
  planCurators GrowthPlanCurator[]
}

model GrowthPlanLog {
  id          Int        @id @default(autoincrement())
  planId      Int
  changedById Int
  changeDate  DateTime   @default(now())
  changeType  ChangeType // Например, CREATED, UPDATED, DELETED
  changes     Json

  plan      IndividualGrowthPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  changedBy User                 @relation(fields: [changedById], references: [id])
}


model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int
  title       String
  description String?
  date        DateTime
  watched     Boolean
  type        String // todo: enum
  url         String?

  user User @relation(fields: [userId], references: [id])
}

model Team {
  id           Int        @id @default(autoincrement())
  name         String     @unique
  description  String?
  users        UserTeam[]
  parentTeamId Int?
  parentTeam   Team?      @relation("SubTeams", fields: [parentTeamId], references: [id])
  subTeams     Team[]     @relation("SubTeams")
  curatorId    Int?
  curator      User?      @relation(fields: [curatorId], references: [id])
  createdAt    DateTime   @default(now())
  Rate360      Rate360[]
  curatorSpecs CuratorSpecs[]
}

model CuratorSpecs {
  specId Int
  teamId Int

  spec Spec @relation(fields: [specId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([specId, teamId])

}

model UserTeam {
  id     Int @id @default(autoincrement())
  userId Int
  teamId Int

  user  User              @relation(fields: [userId], references: [id])
  team  Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  specs SpecsOnUserTeam[] @relation("UserTeamToSpecs")

  @@unique([userId, teamId])
}

model SpecsOnUserTeam {
  specId Int
  teamId Int
  userId Int

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  spec     Spec     @relation(fields: [specId], references: [id], onDelete: Cascade)
  userTeam UserTeam @relation("UserTeamToSpecs", fields: [userId, teamId], references: [userId, teamId], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([specId, teamId, userId])
}

// Компетенции внутри специализации
// специализация -> блоки компетенций -> компетенции -> индикаторы
model CompetencyBlock {
  id           Int          @id @default(autoincrement())
  name         String
  type         SkillType // Soft или Hard
  competencies Competency[] // Связь с компетенциями
  specId       Int?
  spec         Spec?        @relation(fields: [specId], references: [id], onDelete: Cascade)
  rates360     Rate360[]
  archived     Boolean?      @default(false)
  archivedDate DateTime?
}

model Competency {
  id         Int                  @id @default(autoincrement())
  name       String
  blockId    Int
  block      CompetencyBlock      @relation(fields: [blockId], references: [id], onDelete: Cascade)
  indicators Indicator[] // Связь с индикаторами
  materials  CompetencyMaterial[]
  comments   UserComments[]
  task    GrowthPlanTask[]         
  planCurators GrowthPlanCurator[]
  archived     Boolean?      @default(false)
  archivedDate DateTime?
}

model Indicator {
  id           Int                 @id @default(autoincrement())
  name         String
  description  String?
  competencyId Int
  boundary     Int               @default(3)
  competency   Competency          @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  materials    IndicatorMaterial[]

  userRates UserRates[]
  task    GrowthPlanTask[]         
  archived     Boolean?      @default(false)
  archivedDate DateTime?
}

// Материалы 
// Привязаны к компетенциям и индикаторам
model Material {
  id          Int                 @id @default(autoincrement())
  planId      Int?
  name        String
  description String
  url         String?
  level       Int
  contentType MaterialContentType

  plan                IndividualGrowthPlan? @relation(fields: [planId], references: [id])
  competencyMaterials CompetencyMaterial[]
  indicatorMaterials  IndicatorMaterial[]
  task    GrowthPlanTask[]         

}

model CompetencyMaterial {
  competencyId Int
  materialId   Int
  competency   Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  material     Material   @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@id([competencyId, materialId])
}

model IndicatorMaterial {
  indicatorId Int
  materialId  Int
  indicator   Indicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade)
  material    Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@id([indicatorId, materialId])
}

model ProfileVersion {
  id        Int      @id @default(autoincrement())

  date     DateTime
}

enum SkillType {
  SOFT
  HARD
}

enum Status {
  COMPLETED
  ACTIVE
  INACTIVE
}

enum TaskStatus {
  COMPLETED
  IN_PROGRESS
  IN_REVIEW
  TO_DO
}

enum MaterialContentType {
  VIDEO
  ARTICLE
  BOOK
  COURSE
}

enum TaskMaterialType {
  GENERAL
  OBVIOUS
  OTHER
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

enum Resut {
  PASSED
  FAILED
}

enum ChangeType {
  CREATED
  UPDATED
  DELETED
}

enum EvaluatorType {
  CURATOR
  TEAM_MEMBER
  SUBORDINATE
}

enum Rate360Type {
  Rate360
  Rate180
}