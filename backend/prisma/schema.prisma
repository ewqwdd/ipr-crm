generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                    @id @default(autoincrement())
  roleId                  Int
  username                String                 @unique
  phone                   String?                @unique
  email                   String                 @unique
  passwordHash            String?
  firstName               String?
  lastName                String?
  avatar                  String?
  specId                  Int?
  authCode                String?
  mentorId                Int?
  createdAt               DateTime               @default(now())
  assignedCourses         Assigned_Course[]
  planCurators            GrowthPlanCurator[]
  logs                    GrowthPlanLog[]
  growthPlans             IndividualGrowthPlan[] @relation("UserGrowthPlans")
  notifications           Notification[]
  ratesToEvaluate         Rate360Evaluator[]
  specsOnTeams            SpecsOnUserTeam[]
  curatorTickets          SupportTicket[]        @relation("CuratorSupportTicket")
  supportTickets          SupportTicket[]        @relation("UserSupportTicket")
  teamCurator             Team[]
  role                    Role                   @relation(fields: [roleId], references: [id])
  Spec                    Spec?                  @relation(fields: [specId], references: [id])
  answeredQuestions       UserAnsweredQuestion[]
  userComments            UserComments[]
  deputyRelationsAsDeputy UserDeputy[]           @relation("UserDeputyDeputy")
  deputyRelationsAsUser   UserDeputy[]           @relation("UserDeputyUser")
  userRates               UserRates[]
  teams                   UserTeam[]
  assignedSurveys         User_Assigned_Survey[]
  assignedTests           User_Assigned_Test[]
  authorRates             Rate360[]               @relation("AuthoredRates")
  rates360                Rate360[]               @relation("AssignedRates")
}

model UserDeputy {
  id        Int      @id @default(autoincrement())
  userId    Int
  deputyId  Int
  createdAt DateTime @default(now())
  deputy    User     @relation("UserDeputyDeputy", fields: [deputyId], references: [id], onDelete: Cascade)
  user      User     @relation("UserDeputyUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deputyId])
}

model Rate360 {
  id               Int                   @id @default(autoincrement())
  userConfirmed    Boolean               @default(false)
  curatorConfirmed Boolean               @default(false)
  startDate        DateTime?             @default(now())
  endDate          DateTime?
  userId           Int
  specId           Int?
  teamId           Int?
  archived         Boolean               @default(false)
  type             SkillType
  createdAt        DateTime              @default(now())
  curatorComment   String?
  finished         Boolean               @default(false)
  rateType         Rate360Type           @default(Rate360)
  userComment      String?
  showReportToUser Boolean               @default(false)
  hidden           Boolean               @default(false)
  globalCommentsEnabled  Boolean                @default(false)
  authorId         Int? 
  plan             IndividualGrowthPlan?
  notifications    Notification[]
  spec             Spec?                  @relation(fields: [specId], references: [id], onDelete: Cascade)
  team             Team?                 @relation(fields: [teamId], references: [id])
  user             User                  @relation("AssignedRates", fields: [userId], references: [id], onDelete: Cascade)
  author           User?                 @relation("AuthoredRates", fields: [authorId], references: [id], onDelete: SetNull)
  evaluators       Rate360Evaluator[]
  comments         UserComments[]
  userRates        UserRates[]
  competencyBlocks CompetencyBlock[]     @relation("CompetencyBlockToRate360")
  cases             Case[]
}

model UserComments {
  id           Int        @id @default(autoincrement())
  userId       Int
  rate360Id    Int
  comment      String
  competencyId Int?
  compentency  Competency? @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  rate360      Rate360    @relation(fields: [rate360Id], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserRates {
  id             Int       @id @default(autoincrement())
  userId         Int
  rate360Id      Int
  indicatorId    Int?
  caseId         Int?
  rate           Int
  approved       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  comment        String?


  case           Case?      @relation(fields: [caseId], references: [id], onDelete: Cascade)
  indicator      Indicator? @relation(fields: [indicatorId], references: [id], onDelete: Cascade)
  rate360        Rate360   @relation(fields: [rate360Id], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model Assigned_Course {
  id        Int       @id @default(autoincrement())
  userId    Int
  courseId  Int
  startDate DateTime?
  endDate   DateTime?
  status    Status    @default(ACTIVE)
  course    Course    @relation(fields: [courseId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Course {
  id              Int               @id @default(autoincrement())
  externalUrl     String?
  name            String
  description     String
  specId          Int?
  skillId         Int
  archived        Boolean           @default(false)
  Assigned_Course Assigned_Course[]
  Spec            Spec?             @relation(fields: [specId], references: [id])
}

model Spec {
  id               Int                    @id @default(autoincrement())
  name             String
  description      String?
  active           Boolean                @default(true)
  archived         Boolean                @default(false)
  courses          Course[]
  curatorSpecs     CuratorSpecs[]
  growthPlans      IndividualGrowthPlan[]
  rate360          Rate360[]
  usersTeams       SpecsOnUserTeam[]
  users            User[]
  competencyBlocks CompetencyBlock[]      @relation("SpecBlocks")
}

model User_Assigned_Test {
  id                    Int                    @id @default(autoincrement())
  userId                Int
  testId                Int
  startDate             DateTime?
  endDate               DateTime?
  availableFrom         DateTime?              @default(now())
  finished              Boolean                @default(false)
  firstNotificationSent Boolean                @default(false)
  notifications         Notification[]
  answeredQUestions     UserAnsweredQuestion[]
  test                  Test                   @relation(fields: [testId], references: [id], onDelete: Cascade)
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User_Assigned_Survey {
  id                    Int                    @id @default(autoincrement())
  userId                Int
  surveyId              Int
  startDate             DateTime?
  endDate               DateTime?
  finished              Boolean                @default(false)
  availableFrom         DateTime?              @default(now())
  firstNotificationSent Boolean                @default(false)
  notifications         Notification[]
  answeredQUestions     UserAnsweredQuestion[]
  survey                Survey                 @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserAnsweredQuestion {
  id               Int                          @id @default(autoincrement())
  userId           Int
  questionId       Int?
  surveyQuestionId Int?
  assignedTestId   Int?
  assignedSurveyId Int?
  correct          Boolean?
  textAnswer       String?
  numberAnswer     Int?
  scaleAnswer      Int?
  dateAnswer       DateTime?
  fileAnswer       String?
  phoneAnswer      String?
  timeAnswer       String?
  survey           User_Assigned_Survey?        @relation(fields: [assignedSurveyId], references: [id], onDelete: Cascade)
  test             User_Assigned_Test?          @relation(fields: [assignedTestId], references: [id], onDelete: Cascade)
  question         Question?                    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  surveyQuestion   SurveyQuestion?              @relation(fields: [surveyQuestionId], references: [id], onDelete: Cascade)
  user             User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  options          UserAnsweredQuestionOption[]
}

model UserAnsweredQuestionOption {
  id                     Int                  @id @default(autoincrement())
  userAnsweredQuestionId Int
  optionId               Int
  correct                Boolean?
  option                 Option               @relation(fields: [optionId], references: [id], onDelete: Cascade)
  userAnsweredQuestion   UserAnsweredQuestion @relation(fields: [userAnsweredQuestionId], references: [id], onDelete: Cascade)
}

model Survey {
  id              Int                    @id @default(autoincrement())
  name            String
  description     String?
  finishMessage   String?
  startDate       DateTime
  endDate         DateTime?
  access          TestAccess             @default(PRIVATE)
  anonymous       Boolean                @default(false)
  archived        Boolean                @default(false)
  hidden          Boolean                @default(true)
  surveyQuestions SurveyQuestion[]
  usersAssigned   User_Assigned_Survey[]
  previewImage     String?
}

model SurveyQuestion {
  id                Int                    @id @default(autoincrement())
  type              SurveyType
  label             String
  description       String?
  surveyId          Int
  order             Int
  required          Boolean                @default(true)
  archived          Boolean                @default(false)
  maxLength         Int?
  maxNumber         Int?
  minNumber         Int?
  allowDecimal      Boolean                @default(false)
  scaleDots         Int?
  scaleStart        String?
  scaleEnd          String?
  photoUrl          String?
  options           Option[]
  Survey            Survey                 @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  answeredQuestions UserAnsweredQuestion[]
}

model Test {
  id               Int                  @id @default(autoincrement())
  name             String
  anonymous        Boolean              @default(false)
  description      String?
  startDate        DateTime
  endDate          DateTime?
  archived         Boolean              @default(false)
  failedMessage    String?
  finishMessage    String?
  hidden           Boolean              @default(true)
  limitedByTime    Boolean              @default(false)
  minimumScore     Int?
  passedMessage    String?
  showScoreToUser  Boolean              @default(false)
  timeLimit        Int?
  access           TestAccess           @default(PRIVATE)
  shuffleQuestions Boolean              @default(false)
  testQuestions    Question[]
  usersAssigned    User_Assigned_Test[]
  previewImage     String?
}

model Question {
  id                 Int                    @id @default(autoincrement())
  description        String?
  testId             Int
  order              Int
  allowDecimal       Boolean                @default(false)
  archived           Boolean                @default(false)
  label              String
  maxLength          Int?
  maxNumber          Int?
  minNumber          Int?
  numberCorrectValue Int?
  required           Boolean                @default(true)
  score              Int?
  textCorrectValue   String?
  type               QuestionType
  photoUrl           String?
  options            Option[]
  Test               Test                   @relation(fields: [testId], references: [id], onDelete: Cascade)
  answeredQuestions  UserAnsweredQuestion[]
}

model Option {
  id               Int                          @id @default(autoincrement())
  questionId       Int?
  value            String
  isCorrect        Boolean                      @default(false)
  archived         Boolean                      @default(false)
  score            Int?
  surveyQuestionId Int?
  Question         Question?                    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  SurveyQuestion   SurveyQuestion?              @relation(fields: [surveyQuestionId], references: [id], onDelete: Cascade)
  pickedOptions    UserAnsweredQuestionOption[]
}

model Rate360Evaluator {
  id        Int           @id @default(autoincrement())
  userId    Int
  rate360Id Int
  type      EvaluatorType @default(TEAM_MEMBER)
  rate360   Rate360       @relation(fields: [rate360Id], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SkillsOnRate360 {
  skillId   Int
  rate360Id Int

  @@id([skillId, rate360Id])
}

model GrowthPlanCurator {
  id     Int                  @id @default(autoincrement())
  userId Int
  planId Int
  plan   IndividualGrowthPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  user   User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GrowthPlanTask {
  id           Int                  @id @default(autoincrement())
  deadline     DateTime?
  status       TaskStatus
  priority     TaskPriority?        @default(MEDIUM)
  type         TaskMaterialType
  onBoard      Boolean              @default(false)
  planId       Int
  indicatorId  Int?
  materialId   Int
  competencyId Int?
  competency   Competency?          @relation(fields: [competencyId], references: [id])
  indicator    Indicator?           @relation(fields: [indicatorId], references: [id])
  material     Material             @relation(fields: [materialId], references: [id], onDelete: Cascade)
  plan         IndividualGrowthPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model IndividualGrowthPlan {
  id            Int                 @id @default(autoincrement())
  userId        Int
  startDate     DateTime
  endDate       DateTime?
  status        Status
  goal          String
  result        Resut?
  specId        Int?
  archived      Boolean             @default(false)
  version       DateTime            @default(now())
  skillType     SkillType
  rate360Id     Int?                @unique
  planCurators  GrowthPlanCurator[]
  logs          GrowthPlanLog[]
  tasks         GrowthPlanTask[]
  rate360       Rate360?            @relation(fields: [rate360Id], references: [id])
  spec          Spec?               @relation(fields: [specId], references: [id])
  user          User                @relation("UserGrowthPlans", fields: [userId], references: [id], onDelete: Cascade)
  materials     Material[]
  notifications Notification[]
}

model GrowthPlanLog {
  id          Int                  @id @default(autoincrement())
  planId      Int
  changedById Int
  changeDate  DateTime             @default(now())
  changeType  ChangeType
  changes     Json
  changedBy   User                 @relation(fields: [changedById], references: [id])
  plan        IndividualGrowthPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model Notification {
  id               Int                   @id @default(autoincrement())
  userId           Int
  title            String
  description      String?
  date             DateTime              @default(now())
  watched          Boolean               @default(false)
  url              String?
  assignedSurveyId Int?
  assignedTestId   Int?
  iprId            Int?
  rateId           Int?
  type             NotificationType
  assignedSurvey   User_Assigned_Survey? @relation(fields: [assignedSurveyId], references: [id], onDelete: Cascade)
  assignedTest     User_Assigned_Test?   @relation(fields: [assignedTestId], references: [id], onDelete: Cascade)
  ipr              IndividualGrowthPlan? @relation(fields: [iprId], references: [id], onDelete: Cascade)
  rate             Rate360?              @relation(fields: [rateId], references: [id], onDelete: Cascade)
  user             User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  parentTeamId Int?
  curatorId    Int?
  createdAt    DateTime       @default(now())
  curatorSpecs CuratorSpecs[]
  Rate360      Rate360[]
  curator      User?          @relation(fields: [curatorId], references: [id])
  parentTeam   Team?          @relation("SubTeams", fields: [parentTeamId], references: [id])
  subTeams     Team[]         @relation("SubTeams")
  users        UserTeam[]
}

model CuratorSpecs {
  specId Int
  teamId Int
  spec   Spec @relation(fields: [specId], references: [id], onDelete: Cascade)
  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([specId, teamId])
}

model UserTeam {
  id     Int               @id @default(autoincrement())
  userId Int
  teamId Int
  specs  SpecsOnUserTeam[] @relation("UserTeamToSpecs")
  team   Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user   User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model SpecsOnUserTeam {
  specId    Int
  teamId    Int
  userId    Int
  createdAt DateTime @default(now())
  spec      Spec     @relation(fields: [specId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userTeam  UserTeam @relation("UserTeamToSpecs", fields: [userId, teamId], references: [userId, teamId], onDelete: Cascade)

  @@id([specId, teamId, userId])
}

model CompetencyBlock {
  id                           Int                            @id @default(autoincrement())
  name                         String
  type                         SkillType
  archived                     Boolean?                       @default(false)
  archivedDate                 DateTime?
  order                        Int                            @default(0)
  competencies                 Competency[]
  profileStrcuctureFoldersSpec ProfileConstructorFolderSpec[] @relation("CompetencyBlockToProfileConstructorFolderSpec")
  rates360                     Rate360[]                      @relation("CompetencyBlockToRate360")
  specs                        Spec[]                         @relation("SpecBlocks")
}

model Competency {
  id           Int                  @id @default(autoincrement())
  name         String
  blockId      Int
  archived     Boolean?             @default(false)
  archivedDate DateTime?
  order        Int                  @default(0)
  block        CompetencyBlock      @relation(fields: [blockId], references: [id], onDelete: Cascade)
  materials    CompetencyMaterial[]
  task         GrowthPlanTask[]
  indicators   Indicator[]
  comments     UserComments[]
}

model Indicator {
  id           Int                 @id @default(autoincrement())
  name         String
  description  String?
  competencyId Int
  archived     Boolean?            @default(false)
  archivedDate DateTime?
  boundary     Int                 @default(3)
  hint1        String?
  hint2        String?
  hint3        String?
  hint4        String?
  hint5        String?
  value1       String?
  value2       String?
  value3       String?
  value4       String?
  value5       String?
  skipHint     String?
  skipValue    String?
  order        Int                 @default(0)
  task         GrowthPlanTask[]
  competency   Competency          @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  materials    IndicatorMaterial[]
  userRates    UserRates[]
}

model Material {
  id                  Int                   @id @default(autoincrement())
  planId              Int?
  name                String
  description         String
  url                 String?
  level               Int
  contentType         MaterialContentType
  competencyMaterials CompetencyMaterial[]
  task                GrowthPlanTask[]
  indicatorMaterials  IndicatorMaterial[]
  plan                IndividualGrowthPlan? @relation(fields: [planId], references: [id])
}

model CompetencyMaterial {
  competencyId Int
  materialId   Int
  competency   Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  material     Material   @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@id([competencyId, materialId])
}

model IndicatorMaterial {
  indicatorId Int
  materialId  Int
  indicator   Indicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade)
  material    Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@id([indicatorId, materialId])
}

model ProfileVersion {
  id   Int      @id @default(autoincrement())
  date DateTime
}

model SupportTicket {
  id          Int                 @id @default(autoincrement())
  userId      Int
  title       String
  description String
  status      SupportTicketStatus @default(OPEN)
  createdAt   DateTime            @default(now())
  curatorId   Int?
  curator     User?               @relation("CuratorSupportTicket", fields: [curatorId], references: [id])
  user        User                @relation("UserSupportTicket", fields: [userId], references: [id], onDelete: Cascade)
}

model ProfileConstructorFolderProduct {
  id        Int                            @id @default(autoincrement())
  name      String
  createdAt DateTime                       @default(now())
  teams     ProfileConstructorFolderTeam[]
}

model ProfileConstructorFolderTeam {
  id        Int                             @id @default(autoincrement())
  name      String
  productId Int
  createdAt DateTime                        @default(now())
  specs     ProfileConstructorFolderSpec[]
  product   ProfileConstructorFolderProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProfileConstructorFolderSpec {
  id               Int                          @id @default(autoincrement())
  name             String
  teamId           Int
  createdAt        DateTime                     @default(now())
  team             ProfileConstructorFolderTeam @relation(fields: [teamId], references: [id], onDelete: Cascade)
  competencyBlocks CompetencyBlock[]            @relation("CompetencyBlockToProfileConstructorFolderSpec")
}

model Case {
  id               Int                          @id @default(autoincrement())
  name    String
  description String?
  commentEnabled     Boolean?   
  archived    Boolean   @default(false)

  createdAt        DateTime                     @default(now())
  variants  CaseVariant[]
  rates     Rate360[]
  useRates UserRates[]
}

model CaseVariant {
  id               Int                          @id @default(autoincrement())
  name    String
  value   Int
  createdAt        DateTime                     @default(now())

  caseId  Int
  case        Case      @relation(fields: [caseId], references: [id], onDelete: Cascade)
}

enum SkillType {
  SOFT
  HARD
}

enum Status {
  COMPLETED
  ACTIVE
  INACTIVE
}

enum TaskStatus {
  COMPLETED
  IN_PROGRESS
  IN_REVIEW
  TO_DO
}

enum MaterialContentType {
  VIDEO
  ARTICLE
  BOOK
  COURSE
  TASK
}

enum TaskMaterialType {
  GENERAL
  OBVIOUS
  OTHER
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

enum Resut {
  PASSED
  FAILED
}

enum ChangeType {
  CREATED
  UPDATED
  DELETED
}

enum EvaluatorType {
  CURATOR
  TEAM_MEMBER
  SUBORDINATE
}

enum Rate360Type {
  Rate360
  Rate180
  Case
}

enum NotificationType {
  RATE_ASSIGNED_SELF
  RATE_ASSIGNED
  RATE_CONFIRM
  TASK_ASSIGNED
  IPR_ASSIGNED
  TEST_ASSIGNED
  TEST_TIME_OVER
  SURVEY_ASSIGNED
  SUPPORT_TICKET_CREATED
}

enum TestAccess {
  PUBLIC
  PRIVATE
  LINK_ONLY
}

enum QuestionType {
  SINGLE
  MULTIPLE
  NUMBER
  TEXT
}

enum SurveyType {
  SINGLE
  MULTIPLE
  NUMBER
  TEXT
  SCALE
  DATE
  FILE
  PHONE
  TIME
}

enum SupportTicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}
