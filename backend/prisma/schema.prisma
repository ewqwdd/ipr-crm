generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  role         Role    @relation(fields: [roleId], references: [id])
  roleId       Int
  username     String  @unique
  phone        String? @unique
  email        String  @unique
  passwordHash String?
  firstName    String?
  lastName     String?
  avatar       String?
  specId       Int?
  authCode     String?

  assignedCourses   Assigned_Course[]
  assignedTests     User_Assigned_Test[]
  assignedSurveys   User_Assigned_Survey[]
  growthPlans       IndividualGrowthPlan[] @relation("UserGrowthPlans")

  Spec              Spec?                  @relation(fields: [specId], references: [id])
  ratesToEvaluate   Rate360Evaluator[]
  rates360          Rate360[]
  notifications     Notification[]
  logs              GrowthPlanLog[]
  teams             UserTeam[]
  specsOnTeams      SpecsOnUserTeam[]
  userRates         UserRates[]
  userComments      UserComments[]
  planCurators      GrowthPlanCurator[]
  answeredQuestions UserAnsweredQuestion[]

  // Self-relation fields
  mentees     User[] @relation("MentorMentees")
  mentor      User?  @relation("MentorMentees", fields: [mentorId], references: [id])
  mentorId    Int?
  deputyRelationsAsUser    UserDeputy[] @relation("UserDeputyUser")
  deputyRelationsAsDeputy  UserDeputy[] @relation("UserDeputyDeputy")

  teamCurator Team[]

  supportTickets SupportTicket[] @relation("UserSupportTicket")
  curatorTickets SupportTicket[] @relation("CuratorSupportTicket")

  createdAt DateTime @default(now())
}

model UserDeputy {
  id       Int @id @default(autoincrement())
  userId   Int
  deputyId Int
  
  user   User @relation("UserDeputyUser", fields: [userId], references: [id], onDelete: Cascade)
  deputy User @relation("UserDeputyDeputy", fields: [deputyId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, deputyId])
}

model Rate360 {
  id               Int         @id @default(autoincrement())
  userConfirmed    Boolean     @default(false)
  curatorConfirmed Boolean     @default(false)
  startDate        DateTime?   @default(now())
  endDate          DateTime?
  userId           Int
  specId           Int
  teamId           Int?
  user             User @relation(fields: [userId], references: [id], onDelete: Cascade)
  archived         Boolean     @default(false)
  type             SkillType
  userComment      String?
  curatorComment   String?
  finished         Boolean     @default(false)
  hidden           Boolean     @default(false)
  rateType         Rate360Type @default(Rate360)
  showReportToUser Boolean     @default(false)

  competencyBlocks CompetencyBlock[]
  userRates        UserRates[]
  evaluators       Rate360Evaluator[]
  comments         UserComments[]
  spec             Spec                  @relation(fields: [specId], references: [id], onDelete: Cascade)
  team             Team?                  @relation(fields: [teamId], references: [id], onDelete: SetNull)
  plan             IndividualGrowthPlan?
  createdAt        DateTime              @default(now())
  notifications    Notification[]
}

model UserComments {
  id           Int    @id @default(autoincrement())
  userId       Int
  rate360Id    Int
  comment      String
  competencyId Int

  compentency Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  rate360     Rate360    @relation(fields: [rate360Id], references: [id], onDelete: Cascade)
}

model UserRates {
  id             Int     @id @default(autoincrement())
  userId         Int
  rate360Id      Int
  indicatorId    Int
  rate           Int
  approved       Boolean @default(false)
  approvedByUser Boolean @default(false)

  indicator Indicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  rate360   Rate360   @relation(fields: [rate360Id], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

// назначенные курсы для юзеоов
model Assigned_Course {
  id        Int       @id @default(autoincrement())
  userId    Int
  courseId  Int
  startDate DateTime?
  endDate   DateTime?
  status    Status    @default(ACTIVE)

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model Course {
  id          Int     @id @default(autoincrement())
  externalUrl String?
  name        String
  description String
  specId      Int?
  skillId     Int

  Spec            Spec?             @relation(fields: [specId], references: [id])
  Assigned_Course Assigned_Course[]
  archived        Boolean           @default(false)
}

model Spec {
  id               Int                    @id @default(autoincrement())
  name             String
  active           Boolean @default(true)
  description      String?
  users            User[]
  courses          Course[]
  rate360          Rate360[]
  growthPlans      IndividualGrowthPlan[]
  usersTeams       SpecsOnUserTeam[]
  competencyBlocks CompetencyBlock[] @relation("SpecBlocks")
  curatorSpecs     CuratorSpecs[]
  archived         Boolean @default(false)
}

// назначенные тесты юзеру
model User_Assigned_Test {
  id                    Int       @id @default(autoincrement())
  userId                Int
  testId                Int
  startDate             DateTime?
  endDate               DateTime?
  finished              Boolean   @default(false)
  availableFrom         DateTime? @default(now())
  firstNotificationSent Boolean   @default(false)

  user              User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  test              Test                   @relation(fields: [testId], references: [id], onDelete: Cascade)
  answeredQUestions UserAnsweredQuestion[]
  notifications     Notification[]
}

// назначенные опросы юзеру
model User_Assigned_Survey {
  id                    Int       @id @default(autoincrement())
  userId                Int
  surveyId              Int
  startDate             DateTime?
  endDate               DateTime?
  finished              Boolean   @default(false)
  availableFrom         DateTime? @default(now())
  firstNotificationSent Boolean   @default(false)

  user              User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  survey            Survey                 @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  answeredQUestions UserAnsweredQuestion[]
  notifications     Notification[]
}

model UserAnsweredQuestion {
  id               Int      @id @default(autoincrement())
  userId           Int
  questionId       Int?
  surveyQuestionId Int?
  assignedTestId   Int?
  assignedSurveyId Int?
  correct          Boolean?

  textAnswer   String?
  numberAnswer Int?
  scaleAnswer  Int?
  dateAnswer   DateTime?
  fileAnswer   String?
  phoneAnswer  String?
  timeAnswer   String?

  user           User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  question       Question?             @relation(fields: [questionId], references: [id], onDelete: Cascade)
  surveyQuestion SurveyQuestion?       @relation(fields: [surveyQuestionId], references: [id], onDelete: Cascade)
  test           User_Assigned_Test?   @relation(fields: [assignedTestId], references: [id], onDelete: Cascade)
  survey         User_Assigned_Survey? @relation(fields: [assignedSurveyId], references: [id], onDelete: Cascade)

  options UserAnsweredQuestionOption[]
}

model UserAnsweredQuestionOption {
  id                     Int      @id @default(autoincrement())
  userAnsweredQuestionId Int
  optionId               Int
  correct                Boolean?

  userAnsweredQuestion UserAnsweredQuestion @relation(fields: [userAnsweredQuestionId], references: [id], onDelete: Cascade)
  option               Option               @relation(fields: [optionId], references: [id], onDelete: Cascade)
}

// опросы
model Survey {
  id            Int        @id @default(autoincrement())
  name          String
  description   String?
  finishMessage String?
  startDate     DateTime
  endDate       DateTime?
  access        TestAccess @default(PRIVATE)
  anonymous     Boolean    @default(false)

  surveyQuestions SurveyQuestion[]
  usersAssigned   User_Assigned_Survey[]

  archived Boolean @default(false)
  hidden   Boolean @default(true)
}

model SurveyQuestion {
  id          Int        @id @default(autoincrement())
  type        SurveyType
  label       String
  description String?
  surveyId    Int
  order       Int
  required    Boolean    @default(true)
  archived    Boolean    @default(false)

  maxLength Int?

  maxNumber    Int?
  minNumber    Int?
  allowDecimal Boolean @default(false)

  scaleDots  Int?
  scaleStart String?
  scaleEnd   String?

  options Option[]

  Survey            Survey                 @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  answeredQuestions UserAnsweredQuestion[]
}

// тесты
model Test {
  id              Int        @id @default(autoincrement())
  name            String
  description     String?
  finishMessage   String?
  startDate       DateTime
  endDate         DateTime?
  access          TestAccess @default(PRIVATE)
  anonymous       Boolean    @default(false)
  limitedByTime   Boolean    @default(false)
  timeLimit       Int?
  minimumScore    Int?
  passedMessage   String?
  failedMessage   String?
  showScoreToUser Boolean    @default(false)

  testQuestions Question[]
  usersAssigned User_Assigned_Test[]

  archived Boolean @default(false)
  hidden   Boolean @default(true)
}

model Question {
  id                 Int          @id @default(autoincrement())
  type               QuestionType
  label              String
  description        String?
  testId             Int
  order              Int
  options            Option[]
  maxLength          Int?
  maxNumber          Int?
  minNumber          Int?
  required           Boolean      @default(true)
  numberCorrectValue Int?
  allowDecimal       Boolean      @default(false)
  textCorrectValue   String?
  score              Int?

  archived Boolean @default(false)

  Test              Test                   @relation(fields: [testId], references: [id], onDelete: Cascade)
  answeredQuestions UserAnsweredQuestion[]
}

model Option {
  id               Int     @id @default(autoincrement())
  questionId       Int?
  surveyQuestionId Int?
  value            String
  isCorrect        Boolean @default(false)
  archived         Boolean @default(false)
  score            Int?

  Question       Question?                    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  SurveyQuestion SurveyQuestion?              @relation(fields: [surveyQuestionId], references: [id], onDelete: Cascade)
  pickedOptions  UserAnsweredQuestionOption[]
}

// оценивающий 360
model Rate360Evaluator {
  id        Int @id @default(autoincrement())
  userId    Int
  rate360Id Int

  type EvaluatorType @default(TEAM_MEMBER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  rate360 Rate360 @relation(fields: [rate360Id], references: [id], onDelete: Cascade)
}

model SkillsOnRate360 {
  skillId   Int
  rate360Id Int

  @@id([skillId, rate360Id])
}

model GrowthPlanCurator {
  id           Int @id @default(autoincrement())
  userId       Int
  planId       Int

  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan       IndividualGrowthPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model GrowthPlanTask {
  id       Int              @id @default(autoincrement())
  deadline DateTime?
  status   TaskStatus
  priority TaskPriority?    @default(MEDIUM)
  type     TaskMaterialType
  onBoard  Boolean          @default(false)

  planId       Int
  competencyId Int?
  indicatorId  Int?
  materialId   Int

  material   Material              @relation(fields: [materialId], references: [id], onDelete: Cascade)
  competency Competency?           @relation(fields: [competencyId], references: [id])
  indicator  Indicator?            @relation(fields: [indicatorId], references: [id])
  plan       IndividualGrowthPlan? @relation(fields: [planId], references: [id], onDelete: Cascade)
}

// ИПР
model IndividualGrowthPlan {
  id        Int       @id @default(autoincrement())
  userId    Int
  startDate DateTime
  endDate   DateTime?
  status    Status
  goal      String
  result    Resut?
  specId    Int?
  rate360Id Int?      @unique // Добавляем @unique

  spec          Spec?               @relation(fields: [specId], references: [id])
  user          User                @relation("UserGrowthPlans", fields: [userId], references: [id], onDelete: Cascade)
  rate360       Rate360?            @relation(fields: [rate360Id], references: [id], onDelete: SetNull) // Делаем опциональным
  materials     Material[]
  logs          GrowthPlanLog[]
  archived      Boolean             @default(false)
  tasks         GrowthPlanTask[]
  version       DateTime            @default(now())
  skillType     SkillType
  planCurators  GrowthPlanCurator[]
  notifications Notification[]
}

model GrowthPlanLog {
  id          Int        @id @default(autoincrement())
  planId      Int
  changedById Int
  changeDate  DateTime   @default(now())
  changeType  ChangeType // Например, CREATED, UPDATED, DELETED
  changes     Json

  plan      IndividualGrowthPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  changedBy User                 @relation(fields: [changedById], references: [id])
}

model Notification {
  id               Int              @id @default(autoincrement())
  userId           Int
  title            String
  description      String?
  date             DateTime         @default(now())
  watched          Boolean          @default(false)
  type             NotificationType
  assignedTestId   Int?
  assignedSurveyId Int?
  url              String?

  rateId Int?
  rate   Rate360? @relation(fields: [rateId], references: [id], onDelete: Cascade)

  iprId Int?
  ipr   IndividualGrowthPlan? @relation(fields: [iprId], references: [id], onDelete: Cascade)

  user           User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedTest   User_Assigned_Test?   @relation(fields: [assignedTestId], references: [id], onDelete: Cascade)
  assignedSurvey User_Assigned_Survey? @relation(fields: [assignedSurveyId], references: [id], onDelete: Cascade)
}

model Team {
  id           Int            @id @default(autoincrement())
  name         String         
  description  String?
  users        UserTeam[]
  parentTeamId Int?
  parentTeam   Team?          @relation("SubTeams", fields: [parentTeamId], references: [id])
  subTeams     Team[]         @relation("SubTeams")
  curatorId    Int?
  curator      User?          @relation(fields: [curatorId], references: [id])
  createdAt    DateTime       @default(now())
  Rate360      Rate360[]
  curatorSpecs CuratorSpecs[]
}

model CuratorSpecs {
  specId Int
  teamId Int

  spec Spec @relation(fields: [specId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([specId, teamId])
}

model UserTeam {
  id     Int @id @default(autoincrement())
  userId Int
  teamId Int

  user  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  team  Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  specs SpecsOnUserTeam[] @relation("UserTeamToSpecs")

  @@unique([userId, teamId])
}

model SpecsOnUserTeam {
  specId Int
  teamId Int
  userId Int

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  spec     Spec     @relation(fields: [specId], references: [id], onDelete: Cascade)
  userTeam UserTeam @relation("UserTeamToSpecs", fields: [userId, teamId], references: [userId, teamId], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([specId, teamId, userId])
}

// Компетенции внутри специализации
// специализация -> блоки компетенций -> компетенции -> индикаторы
model CompetencyBlock {
  id           Int          @id @default(autoincrement())
  name         String
  type         SkillType // Soft или Hard
  competencies Competency[] // Связь с компетенциями
  specs        Spec[]   @relation("SpecBlocks")
  rates360     Rate360[]
  profileStrcuctureFoldersSpec ProfileConstructorFolderSpec[]
  order        Int @default(0)
  archived     Boolean?     @default(false)
  archivedDate DateTime?
}

model Competency {
  id           Int                  @id @default(autoincrement())
  name         String
  blockId      Int
  block        CompetencyBlock      @relation(fields: [blockId], references: [id], onDelete: Cascade)
  indicators   Indicator[] // Связь с индикаторами
  materials    CompetencyMaterial[]
  comments     UserComments[]
  task         GrowthPlanTask[]
  order        Int @default(0)
  archived     Boolean?             @default(false)
  archivedDate DateTime?
}

model Indicator {
  id           Int                 @id @default(autoincrement())
  name         String
  description  String?
  competencyId Int
  boundary     Int                 @default(3)
  competency   Competency          @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  materials    IndicatorMaterial[]
  order        Int @default(0)

  userRates    UserRates[]
  task         GrowthPlanTask[]
  archived     Boolean?         @default(false)
  archivedDate DateTime?

  skipHint String?
  skipValue String?

  hint1 String?
  hint2 String?
  hint3 String?
  hint4 String?
  hint5 String?

  value1 String?
  value2 String?
  value3 String?
  value4 String?
  value5 String?
}

// Материалы 
// Привязаны к компетенциям и индикаторам
model Material {
  id          Int                 @id @default(autoincrement())
  planId      Int?
  name        String
  description String
  url         String?
  level       Int
  contentType MaterialContentType

  plan                IndividualGrowthPlan? @relation(fields: [planId], references: [id])
  competencyMaterials CompetencyMaterial[]
  indicatorMaterials  IndicatorMaterial[]
  task                GrowthPlanTask[]
}

model CompetencyMaterial {
  competencyId Int
  materialId   Int
  competency   Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  material     Material   @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@id([competencyId, materialId])
}

model IndicatorMaterial {
  indicatorId Int
  materialId  Int
  indicator   Indicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade)
  material    Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@id([indicatorId, materialId])
}

model ProfileVersion {
  id Int @id @default(autoincrement())

  date DateTime
}

model SupportTicket {
  id          Int      @id @default(autoincrement())
  userId      Int
  title       String
  description String
  status      SupportTicketStatus @default(OPEN)
  createdAt   DateTime @default(now())
  curatorId   Int?

  user User @relation("UserSupportTicket", fields: [userId], references: [id], onDelete: Cascade)
  curator User? @relation("CuratorSupportTicket", fields: [curatorId], references: [id], onDelete: SetNull)
}

// ProfileConstructorFolderProduct[] -> ProfileConstructorFolderTeam[] -> ProfileConstructorFolderSpec[] -> CompetencyBlock[] -> Competency[] -> Indicator[]
model ProfileConstructorFolderProduct {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime  @default(now())
  teams       ProfileConstructorFolderTeam[]
}

model ProfileConstructorFolderTeam {
  id          Int      @id @default(autoincrement())
  name        String
  productId   Int
  createdAt   DateTime @default(now())

  product ProfileConstructorFolderProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  specs   ProfileConstructorFolderSpec[] 
}

model ProfileConstructorFolderSpec {
  id          Int      @id @default(autoincrement())
  name        String
  teamId      Int
  createdAt   DateTime @default(now())

  team ProfileConstructorFolderTeam @relation(fields: [teamId], references: [id], onDelete: Cascade)
  competencyBlocks CompetencyBlock[]
}

enum SkillType {
  SOFT
  HARD
}

enum Status {
  COMPLETED
  ACTIVE
  INACTIVE
}

enum TaskStatus {
  COMPLETED
  IN_PROGRESS
  IN_REVIEW
  TO_DO
}

enum MaterialContentType {
  VIDEO
  ARTICLE
  BOOK
  COURSE
  TASK
}

enum TaskMaterialType {
  GENERAL
  OBVIOUS
  OTHER
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

enum Resut {
  PASSED
  FAILED
}

enum ChangeType {
  CREATED
  UPDATED
  DELETED
}

enum EvaluatorType {
  CURATOR
  TEAM_MEMBER
  SUBORDINATE
}

enum Rate360Type {
  Rate360
  Rate180
}

enum NotificationType {
  RATE_ASSIGNED_SELF
  RATE_ASSIGNED
  RATE_CONFIRM
  TASK_ASSIGNED
  IPR_ASSIGNED
  TEST_ASSIGNED
  TEST_TIME_OVER
  SURVEY_ASSIGNED
  SUPPORT_TICKET_CREATED
}

enum TestAccess {
  PUBLIC
  PRIVATE
  LINK_ONLY
}

enum QuestionType {
  SINGLE
  MULTIPLE
  NUMBER
  TEXT
}

enum SurveyType {
  SINGLE
  MULTIPLE
  NUMBER
  TEXT
  SCALE
  DATE
  FILE
  PHONE
  TIME
}

enum SupportTicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}